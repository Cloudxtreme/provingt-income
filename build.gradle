import com.wiredforcode.gradle.spawn.*

group 'uk.gov.digital.ho.proving.income'
version '1.0'

// When building in a docker container a shell script controls the build params via env variables.  Override the version
// number with the envronment variable if it exists.  Otherwise use Gradle variable set above as source for version
// number.  [If Gradle were the sole build tool only the build number would be required from the environment.]
project.ext{
    versionNumber = System.getenv('VERSION_NUMBER')
    if (versionNumber == null) {
        versionNumber = System.getProperty("VERSION_NUMBER", project.version)
    } else {
        project.version = versionNumber
    }
    buildNumber = System.getenv('BUILD_NUMBER')
    if (buildNumber != null) {
        project.version = project.version + '.' + buildNumber
    }
}

def jarName = 'uk.gov.digital.ho.proving.income.api'
def cucumberVersion = "1.2.4"

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE'
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.6.0'
        classpath 'net.serenity-bdd:serenity-gradle-plugin:1.1.28'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'com.wiredforcode.spawn'
apply plugin: 'net.serenity-bdd.aggregator'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = "${jarName}"
    version = "${version}"
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE'
    compile 'org.springframework.boot:spring-boot:1.3.3.RELEASE'
    compile 'org.json:json:20160212'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.7.2'
    compile 'org.codehaus.groovy:groovy-all:2.4.3'
    compile 'org.slf4j:slf4j-parent:1.7.14'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'

    compile 'org.mockito:mockito-core:1.10.19'

    testCompile 'org.codehaus.groovy:groovy-all:2.4.3'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    testCompile 'org.springframework:spring-test:4.2.5.RELEASE'
    testCompile 'cglib:cglib-nodep:3.2.1'
    testCompile 'org.objenesis:objenesis:2.2'
    testCompile "info.cukes:cucumber-junit:$cucumberVersion"
    testCompile "info.cukes:cucumber-groovy:$cucumberVersion"
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'

    // ++ Serenity BDD
    testCompile 'net.serenity-bdd:serenity-core:1.1.28'
    testCompile 'net.serenity-bdd:serenity-junit:1.1.28'
    testCompile 'net.serenity-bdd:serenity-cucumber:1.1.5'

    testCompile('junit:junit:4.12')

    testCompile('org.assertj:assertj-core:1.7.0')
    // -- Serenity BDD

    testCompile('com.github.detro.ghostdriver:phantomjsdriver:1.0.4')
    testCompile('org.seleniumhq.selenium:selenium-server:2.50.1')

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"

    testCompile 'org.apache.commons:commons-lang3:3.4'

}

mainClassName = "uk.gov.digital.ho.proving.income.ServiceRunner"

gradle.startParameter.continueOnFailure = true // Don't let failed tests stop the build

// --------------------------------------------------------------
// Useful
// --------------------------------------------------------------

task versionDetails() {
    println project.group
    println project.version
}
// --------------------------------------------------------------

// --------------------------------------------------------------
// Docker
// --------------------------------------------------------------
docker {
    registry = "https://quay.io/repository/asmoores/"
}

task buildDocker(type: Docker) {
    registry = "quay.io/ukhomeofficedigital"
    push = false
//    tag = 'quay.io/asmoores/' + jar.baseName + version
    applicationName = jar.baseName
    dockerfile = file('build/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
        copy {
            from "src/main/docker/Dockerfile"
            into "build/docker/"
        }
        copy {
            from "src/main/resources/json/"
            into "build/docker/json/"
        }
        copy {
            from "src/main/resources/run.sh"
            into "build/docker/"
        }
    }
}

// The Dokcer task should be able to do the push but it fails, so do it with this task for the time being.
task pushDockerImage(type: Exec) {
    executable "sh"
    args "-c", "docker push quay.io/ukhomeofficedigital/uk.gov.digital.ho.proving.income.api:${version}"
}

buildDocker.dependsOn build//,updateVersionForKubernetes
// --------------------------------------------------------------

// --------------------------------------------------------------
// Automated Testing, start app before testing and shutdown after.
// --------------------------------------------------------------
task startServer(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java -jar ${projectDir}/build/libs/${jarName}-${version}.jar"
    ready 'Started ServiceRunner'
}

task stopServer(type: KillProcessTask)

test.dependsOn startServer
test.finalizedBy stopServer
// --------------------------------------------------------------

// --------------------------------------------------------------
// K8S
// --------------------------------------------------------------
task updateVersionForKubernetes {
    def versionFile = new File('services/tmp/version')
    versionFile.write(project.version)
}
// --------------------------------------------------------------